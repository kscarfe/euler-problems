import { Problem } from './index'

export const problem012: Problem = {
  problemDetails: {
    title: `Highly divisible triangular number`,
    description: `The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    
    Let us list the factors of the first seven triangle numbers:
    
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    
    What is the value of the first triangle number to have over five hundred divisors?`
  },
  run: () => {
    const timeoutLimit = 999999
    const targetDivisorsCount = 500
    let currentTriangleNumber = 0

    const getDivisors = (num: number) => {
      if (num === 0) {
        return []
      }

      if (num === 1) {
        return [1]
      }

      let divisors: number[] = [1, num]

      let limit = num / 2
      for (let n = 2; n < limit; n++) {
        if (num % n === 0) {
          divisors = [...divisors, n, num / n]
          limit = num / n
        }
      }

      return divisors
    }

    for (let n = 0; n < timeoutLimit; n++) {
      currentTriangleNumber += n
      const divisors = getDivisors(currentTriangleNumber)

      if (divisors.length > targetDivisorsCount) {
        return currentTriangleNumber
      }
    }

    return `Failed to find a result after ${timeoutLimit} iterations`
  }
}
